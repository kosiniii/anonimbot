import asyncio
import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from data.utils import CreatingJson
from data.redis_instance import __redis_room__, __redis_users__, random_users
from keyboards.callback_datas import Subscriber, Talking, ContinueSearch
from utils.dataclass import BasicUser
from utils.other import bot, dp, error_logger
from utils.other_celery import RandomMeet
from aiogram.utils import markdown
from keyboards.reply_button import search_again
from aiogram.fsm.context import FSMContext
from .state import random_user
import re
from utils.time import dateMSC
from keyboards.callback_datas import ContinueSearch

logger = logging.getLogger(__name__)
router = Router(name=__name__)

@router.callback_query(F.data == Subscriber.check_button)
async def button_checker_subscriber(callback: CallbackQuery, data: dict):
    try:
        if data.get('is_subscribed', False):
            await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
            await callback.message.delete(
                callback.message.chat.id,
                callback.message.message_id,
            )
            
            if 'saved_command' in data:
                saved_command = data['saved_command']
                new_message = Message(
                    message_id=callback.message.message_id + 1,
                    date=callback.message.date,
                    chat=callback.message.chat,
                    from_user=callback.message.from_user,
                    text=saved_command
                )
                await dp.message.middleware.trigger(new_message, data)
                data.pop('saved_command', None)
        else:
            await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data.regexp(r'^communicate:(\\d+)$'))
async def sucsess_talk(call: CallbackQuery):
    user = BasicUser.from_message(call.message)
    user_id_str = str(user.user_id)
    if user_id_str not in random_users.redis_data():
        await call.answer("–í–∞—à –ø–æ–∏—Å–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
        try:
            await call.message.edit_text(
                text=f"–í–∞—à –ø–æ–∏—Å–∫ –±—ã–ª {markdown.hcode('–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ.\n –ü–æ–∫–∞ –æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–±—â–µ–Ω–∏–µ.",
            )
        except Exception as e:
            logger.error(error_logger(False, 'sucsess_talk', e))

    rn = RandomMeet(user.user_id)
    room_id, result, users = rn.changes_to_random_waiting('ready', True)
    
    if result:
        partner_id = next(us for us in users.keys() if us != user.user_id)
        data = random_users.redis_data()
        user_data = data.get(user_id_str, {})
        tolk_users = user_data.get('tolk_users', [])
        if partner_id not in tolk_users:
            tolk_users.append(partner_id)

        user_data['tolk_users'] = tolk_users
        user_data['data_activity'] = dateMSC
        data[user_id_str] = user_data
        random_users.redis_cashed(data=data)
        user_ids = list(users.keys())
        if all(users[uid].get('ready') for uid in user_ids):
            for users_id in user_ids:
                await bot.edit_message_text(
                    text=f"–¢–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä {markdown.hlink('—Ç—É—Ç', f'tg://user?id={users_id}')}",
                    chat_id=users_id,
                    message_id=call.message.message_id
                )
                data = rn.delete_meet(room_id)
                if data:
                    logger.info(f'–ë—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')
                else:
                    logger.error(f'[–û–∏—à–±–∫–∞] –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')
        logger.info(f'{user.user_id} –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ')
        await call.message.edit_text(text=f'{markdown.hbold("–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")}. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚è∏Ô∏è')
    else:
        logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ')
        return False

@router.callback_query(F.data == Talking.search)
async def skip_talk(call: CallbackQuery, state: FSMContext):
    user = BasicUser.from_message(call.message)
    user_id_str = str(user.user_id)

    if user_id_str not in random_users.redis_data():
        await call.answer("–í–∞—à –ø–æ–∏—Å–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
        try:
            await call.message.edit_text(
                text="–í–∞—à –ø–æ–∏—Å–∫ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=None
            )
        except Exception as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ (skip_talk): {e}")
        return 

    rn = RandomMeet(user.user_id)
    room_id, result, users = rn.changes_to_random_waiting('ready', False)
    if result:
        partner_id = next(us for us in users.keys() if us != user.user_id)
        data = random_users.redis_data()
        user_data = data.get(user_id_str, {})
        skip_users = user_data.get('skip_users', [])
        if partner_id not in skip_users:
            skip_users.append(partner_id)
            
        user_data['skip_users'] = skip_users
        user_data['data_activity'] = dateMSC
        data[user_id_str] = user_data
        random_users.redis_cashed(data=data)
        data = rn.delete_meet(room_id)
        if not data:
            logger.error(f'[–û—à–∏–±–∫–∞] –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')

        logger.info(f'–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {room_id} –¥–ª—è {user.user_id}')
        await call.message.edit_text(
            text='üôà –í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ üîé',
            reply_markup=search_again()
            )
        await state.set_state(random_user.search_again)

    else:
        logger.error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ\n –ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.')
        return False


@router.callback_query(F.data == ContinueSearch.continue_search)
async def handle_continue_search(call: CallbackQuery):
    user_id = call.from_user.id
    message = call.message
    
    if message:
        try:
            CreatingJson().random_data_user([user_id], {
                'continue_id': None, 
            })
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ')
            await message.delete()
            await call.answer(text='‚úÖ')

        except Exception as e:
            logger.error(f'[–û—à–∏–±–∫–∞] –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è {user_id}: {e}')
            await call.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
    else:
        logger.error(f'[–û—à–∏–±–∫–∞] message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await call.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
