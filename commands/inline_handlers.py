import asyncio
import logging
from turtle import st
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from keyboards.inline_buttons import continue_search_button
from data.redis_instance import __redis_room__, __redis_users__, __redis_random__, redis_random, __redis_random_waiting__, redis_random_waiting
from keyboards.callback_datas import Subscriber, Talking, ContinueSearch
from utils.dataclass import BasicUser
from utils.other import bot, dp, error_logger, _send_message_to_user
from utils.celery_tools import RandomMeet, details_fromDB
from aiogram.utils import markdown
from keyboards.reply_button import main_commands
from aiogram.fsm.context import FSMContext
from .state import random_user
from aiogram.filters import or_f
from utils.time import dateMSC, time_for_redis
from keyboards.callback_datas import ContinueSearch
from data.celery.tasks import add_user_to_search, monitor_search_users_party
from config import CHANNEL_ID
from aiogram.types import CallbackQuery, Message, ChatMemberLeft
import aiogram.exceptions
from sqlalchemy.ext.asyncio import AsyncSession

logger = logging.getLogger(__name__)
router = Router(name=__name__)
wait_text = f'‚úîÔ∏è –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.\n‚è∏Ô∏è –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫.\n'
cancel_text = "üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞."

@router.callback_query(F.data == Subscriber.check_button)
async def button_checker_subscriber(callback: CallbackQuery, state: FSMContext):
    user = BasicUser.from_message(message=None, call_user=callback.from_user)
    try:
        user_status = await callback.from_user.bot.get_chat_member(CHANNEL_ID, user.user_id)
        if isinstance(user_status, ChatMemberLeft):
            await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        else:
            await callback.answer('‚úÖ')
            await callback.message.delete()
            from commands.basic_command import menu_chats
            await menu_chats(message=callback.message, state=state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


@router.callback_query(F.data == Talking.communicate)
async def sucsess_talk(call: CallbackQuery, db_session: AsyncSession):
    user = BasicUser.from_message(message=None, call_user=call.from_user)
    rm = RandomMeet(user.user_id)
    data =  __redis_random__.get_cached()
    _, users, _ = rm.getitem_to_random_waiting(return_full_info=True)
    error_users = []
    if users:
        error_users = [us for us in users.keys() if us not in data]
    else:
        logger.info(f'users: {type(users)}, –Ω–µ –Ω–∞—à–µ–ª {user.user_id} –≤ random_waiting')

    if error_users:
        logger.error(f'–Æ–∑–µ—Ä-—ã –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã –≤ random_waiting –ª–∏–±–æ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã:\n{error_users}')
        await call.answer("‚òùÔ∏è")
        try:
            await call.message.edit_text(
                text=f"üïó –ü—Ä–æ—à–ª–æ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
            )
        except Exception as e:
            logger.error(error_logger(False, 'sucsess_talk', e))
        return

    rm = RandomMeet(user.user_id)
    room_id, result, users = rm.getitem_to_random_waiting(field='ready', value=True, complete_update=True)
    print(room_id, result, users)

    if result:
        message_count = int(rm.getitem_to_random_user(item='message_count'))
        reset = rm.reset_rdata(items=['added_time', 'last_animation_text', 'continue_id'], add={'message_count': message_count - 1})
        if not reset:
            logger.error(f'–î–∞–Ω–Ω—ã–µ {user.user_id} –Ω–µ –æ–±–Ω—É–ª–∏–ª–∏—Å—å')

        user_ids = users.keys()
        user_ids_list = list(user_ids)
        
        if len(user_ids_list) == 2 and all(users.get(uid).get('ready') for uid in user_ids_list):
            user1_id_str = user_ids_list[0]
            user2_id_str = user_ids_list[1]
            users_int = [int(user1_id_str), int(user2_id_str)]
            full_data_users: dict = await details_fromDB(
                db_session=db_session,
                users=users_int,
                name_or_pseudonym=True,
                )

            if full_data_users:
                user_names = {}
                for uid in users_int:
                    user_info: dict = full_data_users.get(uid)
                    if user_info:
                        user_names[uid] = user_info.get('name_or_pseudonym') or user_info.get('user_inf').full_name

                for current_user_id_int in users_int:
                    partner_user_id_int = next(uid for uid in users_int if uid != current_user_id_int)
                    partner_user_name = user_names.get(partner_user_id_int, '–ó–¥–µ—Å—å')

                    rm_current = RandomMeet(current_user_id_int)
                    edit_message_id = rm_current.getitem_to_random_waiting('message_id', return_value=True)

                    message_text_to_send = f"üîî –¢–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä -> {markdown.hlink(f'{partner_user_name}', f'tg://user?id={partner_user_id_int}')}"
                    logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id_int}: Partner ID: {partner_user_id_int}, –°—Å—ã–ª–∫–∞: {message_text_to_send}")

                    try:
                        await bot.edit_message_text(
                            text=message_text_to_send,
                            chat_id=current_user_id_int,
                            message_id=edit_message_id,
                            reply_markup=continue_search_button(ContinueSearch.continue_search_edit),
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {current_user_id_int} (message_id: {edit_message_id}): {e}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                        await bot.send_message(
                            chat_id=current_user_id_int,
                            text=message_text_to_send,
                            reply_markup=continue_search_button(ContinueSearch.continue_search_edit),
                        )

            if rm.delete_meet(room_id):
                logger.info(f'–ë—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')
                return
            else:
                logger.error(f'[–û–∏—à–±–∫–∞] –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')

        logger.info(f'{user.user_id} –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ')
        try:
            await call.message.edit_text(text=wait_text, reply_markup=continue_search_button(ContinueSearch.continue_search_edit))
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user.user_id} (message_id: {call.message.message_id}): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await call.message.answer(text=wait_text, reply_markup=continue_search_button(ContinueSearch.continue_search_edit))
    else:
        logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤ changes_to_random_waiting')
        return

@router.callback_query(F.data == Talking.search)
async def skip_talk(call: CallbackQuery):
    user = BasicUser.from_message(message=None, call_user=call.from_user)
    rm = RandomMeet(user.user_id)
    _, users, _ = rm.getitem_to_random_waiting(return_full_info=True)
    error_users = [us for us in users.keys() if us not in __redis_random__.get_cached()]
    
    if error_users:
        logger.error(f'–Æ–∑–µ—Ä-—ã –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã –≤ random_waiting –ª–∏–±–æ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã:\n{error_users}')
        await call.answer("‚òùÔ∏è")
        try:
            await call.message.edit_text(text="üïó –ü—Ä–æ—à–ª–æ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",)
        except Exception as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ (skip_talk): {e}")
        return
    else:
        room_id, result, users = rm.getitem_to_random_waiting(field='ready', value=False, complete_update=True)
        if result:
            partner_id = next(int(us) for us in users.keys() if int(us) != user.user_id)
            partner_msd = RandomMeet(partner_id).getitem_to_random_waiting(field='message_id', return_value=True,)
            message_count = int(rm.getitem_to_random_user(item='message_count'))
            reset = rm.reset_rdata(items=['added_time', 'last_animation_text', 'continue_id'], add={'message_count': message_count - 1})
            if not reset:
                logger.error(f'–î–∞–Ω–Ω—ã–µ {user.user_id} –Ω–µ –æ–±–Ω—É–ª–∏–ª–∏—Å—å')
 
            data_after_delete = rm.delete_meet(room_id)
            if data_after_delete is not False:
                logger.info(f'–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {room_id} –¥–ª—è {users}')
            else:
                logger.error(f'[–û—à–∏–±–∫–∞] –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: {room_id}')

            try:
                await bot.edit_message_text(
                    text=cancel_text,
                    chat_id=partner_id,
                    message_id=partner_msd,
                    reply_markup=continue_search_button(ContinueSearch.continue_search)
                )
            except Exception as e:
                logger.error(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {partner_id} –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n {e}')
                await bot.send_message(
                    chat_id=partner_id,
                    text=cancel_text,
                    reply_markup=continue_search_button(ContinueSearch.continue_search),
                )

            await call.message.edit_text(
                text=f'üôà –í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫.',
                reply_markup=continue_search_button(ContinueSearch.continue_search)
                )

        else:
            logger.error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤ changes_to_random_waiting\n –ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.')
            return


@router.callback_query(or_f(F.data == ContinueSearch.continue_search, F.data == ContinueSearch.continue_search_edit))
async def handle_continue_search(call: CallbackQuery):
    user_id = call.from_user.id
    message = call.message
    rm = RandomMeet(user_id)

    if message:
        try:
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ')
            await call.answer(text='üîç')

            if not call.data == ContinueSearch.continue_search_edit:
                await message.delete()    
            message_obj = await message.answer(text='–ò–¥–µ—Ç –ø–æ–∏—Å–∫')

            rm.reset_rdata(items=['continue_id', 'added_time'])
            add_user_to_search.delay(message_obj.message_id, user_id, redis_random)
            monitor_search_users_party.delay()

        except Exception as e:
            logger.error(f'[–û—à–∏–±–∫–∞] –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è {user_id}: {e}')
            await call.answer(text='üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
    else:
        logger.error(f'[–û—à–∏–±–∫–∞] message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        await call.answer(text='üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')