from email import message
import logging
import stat
from kos_Htools import BaseDAO
from sqlalchemy import select
from commands.state import Main_menu, Menu_chats, find_groups, Admin_menu, random_user, Back
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils import markdown
from data.redis_instance import __redis_room__, __redis_users__, redis_random, redis_users, __redis_random__
from keyboards.lists_command import command_chats, main_command_list
from aiogram import F, Bot, Router
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from data.sqlchem import User
from keyboards.button_names import chats_bt, main_commands_bt, search_again_bt
from keyboards.reply_button import chats, main_commands, back_bt
from sqlalchemy.ext.asyncio import AsyncSession
from utils.dataclass import BasicUser
from keyboards.inline_buttons import go_tolk
from data.utils import CreatingJson
from data.celery.tasks import message_text, remove_user_from_search, add_user_to_search, monitor_search_users_party
from utils.celery_tools import bot, RandomMeet, create_private_group, find_func

pseudonym = 'psdn.'
anonim = 'Anonim'
logger = logging.getLogger(__name__)
router = Router(name=__name__)

text_instructions = markdown.text(
    f'{main_commands_bt.find} - –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞(–æ–≤) (–æ—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞)\n\n'
    f"{main_commands_bt.stop} - –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞\n\n"
    f'‚è≠Ô∏è {markdown.blockquote("–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞—à–µ–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –±–æ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç")}\n',
    )

@router.message(F.text.in_(command_chats), StateFilter(Menu_chats.system_chats))
async def system_chats(message: Message, state: FSMContext):
    text = message.text
    if text == chats_bt.one:
        await message.answer(
            text=
            f'–°–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ {len(__redis_users__.get_cached())}'
            f'–í–≤–µ–¥–∏—Ç–µ —Å –∫–∞–∫–∏–º –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ [–º–∏–Ω –æ—Ç {markdown.hcode('3')}]'
        )
        await state.set_state(find_groups.enter_users)

    elif text == chats_bt.two:
        await message.answer(text=text_instructions, reply_markup=main_commands())
        await state.set_state(random_user.main)


@router.message(
    F.text.in_(main_command_list),
    StateFilter(find_groups.main)
    )
async def reply_command(message: Message, state: FSMContext, db_session: AsyncSession):
    user_id = message.from_user.id
    text = message.text
    if text == main_commands_bt.find:
        chat = await create_private_group()
        chat_id = chat.id
        ff = await find_func(message, user_id, chat_id)
        if not ff:
            logger.info(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {user_id} –∏–ª–∏ –ü–æ–∏—Å–∫ —É–∂–µ –∏–¥–µ—Ç')
            return False
            
    elif text == main_commands_bt.stop:
        data: list = __redis_users__.get_cached(redis_users)
        if user_id in data and data:
            data.remove(user_id)
            __redis_users__.cashed(redis_users, data=data, ex=None)
            await message.answer(text='üõë –í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –ø–æ–∏—Å–∫')
        else:
            await message.answer(text='üöÄ –í—ã –µ—â–µ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ –Ω–∞–∂–º–∏—Ç–µ —Å–∫–æ—Ä–µ–µ /find')
        
    elif text == main_commands_bt.back:
        from utils.other import menu_chats
        await menu_chats(message, state)


@router.message(
    F.text.in_(main_command_list),
    StateFilter(random_user.main, random_user.search_again)
    )
async def send_random_user(message: Message, state: FSMContext, db_session: AsyncSession):
    user = BasicUser.from_message(message)
    text = message.text
    rm = RandomMeet(user.user_id)
    rm.getitem_to_random_user(item='contine_id', change_to=None, _change_provided=True)
    try:
        from utils.other import remove_invisible
        if not remove_invisible(user.full_name):
            await state.set_state(random_user.if_null)
            await message.answer(
                text=f'–Ø –≤–∏–∂—É —É —Ç–µ–±—è –Ω–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫–Ω–µ–π–º. –ü—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º üìù',
                reply_markup=back_bt()
                )

        if text == main_commands_bt.find:
            message_count = rm.getitem_to_random_user(item='message_id')
            if not message_count:
                message_count = 0
                
            if message_count >= 5:
                await message.answer(
                    text=
                    f'‚ÄºÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. {message_count}/5\n'
                    f'–î–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ–∏—Å–∫ –±—ã–ª {markdown.hcode("–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ (üòí —Å–∫–∏–ø) –∏–ª–∏ (‚úÖ –æ–±—â–∞—Ç—å—Å—è)\n'
                    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å {markdown.hcode("–ø–æ–∏—Å–∫")}'
                )
            message_obj = await message.answer(message_text) 
            change = rm.getitem_to_random_user(item='message_id', change_to=message_count + 1)
            if change:
                add_user_to_search.delay(message_obj.message_id, user.user_id, redis_random)
                monitor_search_users_party.delay()
            else:
                logger.error('[–û—à–∏–±–∫–∞] –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ message_count –Ω–∞ + 1')
                from utils.other import error_logger
                await bot.send_message(chat_id=user.user_id, text=error_logger(True))

        if text == main_commands_bt.stop:
            if remove_user_from_search.delay(user.user_id).get():
                logger.info(f'{user.user_id} –≤—ã—à–µ–ª –∏–∑ –ø–æ–∏—Å–∫–∞')
                await message.answer(
                    text='‚õîÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.\n üîÑ –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                    reply_markup=main_commands()
                )
                await state.set_state(random_user.search_again)
        
        if text == main_commands_bt.back:
            await state.set_state(Back.main_menu)


    except Exception as e:
        from utils.other import error_logger
        logger.error(error_logger(False, 'send_random_user', e))


@router.message(F.text, StateFilter(random_user.if_null))
async def saved_name_user(message: Message, state: FSMContext, db_session: AsyncSession):
    user = BasicUser.from_message(message)
    data = await state.get_data()
    text: str = data.get('name')
    userb = BaseDAO(User, db_session)
    if not text:
        text = message.text

    from utils.other import remove_invisible
    if not remove_invisible(text):
        await message.answer(f'–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ–ø—è—Ç—å –≤–≤–µ–ª–∏ –Ω–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–æ—à—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞ üîÑ')
        await state.set_state(random_user.again_name)

    save = await userb.update(User.user_id == user.user_id, {'pseudonym': text.join(f" {pseudonym}")})
    if save:
        await state.set_state(random_user.main)
        await message.answer(
            text=f'üëå –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º: {text}\n –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É.',
            reply_markup=main_commands()
            )
    else:
        logger.info(f'–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ {text} —é–∑–µ—Ä–∞ {user.user_id}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        from utils.other import error_logger
        await message.answer(error_logger(True))

@router.message(F.text, StateFilter(random_user.again_name))
async def again_enter_name(message: Message, state: FSMContext):
    await state.set_data({'name': message.text})
    await state.set_state(random_user.if_null)

@router.message(F.text == main_commands_bt.back, StateFilter(Back.main_menu))
async def back_main_menu(message: Message, state: FSMContext):
    from utils.other import menu_chats
    await menu_chats(message, state, edit=True)

